*** array.c	2012-02-28 03:28:22.000000000 +0900
--- mod_array.c	2012-02-28 21:51:42.000000000 +0900
***************
*** 17,22 ****
--- 17,24 ----
  #include "ruby/encoding.h"
  #include "internal.h"
  
+ #include <math.h>
+ 
  #ifndef ARRAY_DEBUG
  # define NDEBUG
  #endif
***************
*** 24,29 ****
--- 26,33 ----
  
  #define numberof(array) (int)(sizeof(array) / sizeof((array)[0]))
  
+ #define Need_Float(x) do {if (!RB_TYPE_P(x, T_FLOAT)) {(x) = rb_to_float(x);}} while(0)
+ 
  VALUE rb_cArray;
  
  static ID id_cmp;
***************
*** 4682,4687 ****
--- 4686,4833 ----
      return rb_ary_drop(ary, LONG2FIX(i));
  }
  
+ static VALUE
+ rb_ary_sum(VALUE ary)
+ {
+     double sum;
+     int i;
+ 
+     sum = 0.0;
+ 
+     for (i=0; i<RARRAY_LEN(ary); i++) {
+ 	Need_Float(RARRAY_PTR(ary)[i]);
+ 	sum += NUM2DBL(RARRAY_PTR(ary)[i]);
+     }
+ 
+     return DBL2NUM(sum);
+ }
+ 
+ static VALUE
+ rb_ary_prod(VALUE ary)
+ {
+     double prod;
+     int i;
+ 
+     prod = 0.0;
+ 
+     for (i=0; i<RARRAY_LEN(ary); i++) {
+ 	Need_Float(RARRAY_PTR(ary)[i]);
+ 	prod *= NUM2DBL(RARRAY_PTR(ary)[i]);
+     }
+ 
+     return DBL2NUM(prod);
+ }
+ 
+ static VALUE
+ rb_ary_min(VALUE ary)
+ {
+     double min;
+     int i;
+ 
+     Need_Float(RARRAY_PTR(ary)[0]);
+     min = RFLOAT_VALUE(RARRAY_PTR(ary)[0]);
+ 
+     for (i = 0; i < RARRAY_LEN(ary); i++) {
+         Need_Float(RARRAY_PTR(ary)[i]);
+         if (min > RFLOAT_VALUE(RARRAY_PTR(ary)[i]))
+             min = RFLOAT_VALUE(RARRAY_PTR(ary)[i]);
+     }
+ 
+     return DBL2NUM(min);
+ }
+ 
+ static VALUE
+ rb_ary_max(VALUE ary)
+ {
+     double max;
+     int i;
+ 
+     Need_Float(RARRAY_PTR(ary)[0]);
+     max = RFLOAT_VALUE(RARRAY_PTR(ary)[0]);
+ 
+     for (i = 0; i < RARRAY_LEN(ary); i++) {
+         Need_Float(RARRAY_PTR(ary)[i]);
+         if (max < RFLOAT_VALUE(RARRAY_PTR(ary)[i]))
+             max = RFLOAT_VALUE(RARRAY_PTR(ary)[i]);
+     }
+ 
+     return DBL2NUM(max);
+ }
+ 
+ static VALUE
+ rb_ary_range(VALUE ary)
+ {
+     VALUE range_ary;
+ 
+     range_ary = rb_ary_new();
+     rb_ary_push(range_ary, rb_ary_min(ary));
+     rb_ary_push(range_ary, rb_ary_max(ary));
+ 
+     return range_ary;
+ }
+ 
+ static VALUE
+ rb_ary_mean(VALUE ary)
+ {
+     double mean;
+ 
+     mean = RFLOAT_VALUE(rb_ary_sum(ary))/RARRAY_LEN(ary);
+ 
+     return DBL2NUM(mean);
+ }
+ 
+ static VALUE
+ rb_ary_var(VALUE ary)
+ {
+     double mean, var, x;
+     int i;
+ 
+     var = 0.0;
+     mean = NUM2DBL(rb_ary_mean(ary));
+     for (i = 0; i < RARRAY_LEN(ary); i++) {
+         x = NUM2DBL(RARRAY_PTR(ary)[i]);
+         var += (x - mean)*(x - mean);
+     }
+     var /= (double)RARRAY_LEN(ary);
+ 
+     return DBL2NUM(var);
+ }
+ 
+ static VALUE
+ rb_ary_stddev(VALUE ary)
+ {
+     return DBL2NUM(sqrt(NUM2DBL(rb_ary_var(ary))));
+ }
+ 
+ static VALUE
+ rb_ary_correl(VALUE ary, VALUE ary1)
+ {
+     double cor, sum1, sum2, sum12, mean_x, mean_y, x, y;
+     int i;
+ 
+     if (!RB_TYPE_P(ary1, T_ARRAY)) return Qnil;
+ 
+     if (RARRAY_LEN(ary) != RARRAY_LEN(ary1)) return Qnil;
+     
+     cor = sum1 = sum2 = sum12 = 0.0;
+     mean_x = NUM2DBL(rb_ary_mean(ary));
+     mean_y = NUM2DBL(rb_ary_mean(ary1));
+ 
+     for (i = 0; i < RARRAY_LEN(ary); i++) {
+         Need_Float(RARRAY_PTR(ary)[i]);
+         Need_Float(RARRAY_PTR(ary1)[i]);
+         
+         x = NUM2DBL(RARRAY_PTR(ary)[i]);
+         y = NUM2DBL(RARRAY_PTR(ary1)[i]);
+         sum1 += (x - mean_x)*(x - mean_x);
+         sum2 += (y - mean_y)*(y - mean_y);
+         sum12 += (x- mean_x)*(y - mean_y);
+     }
+     cor = sum12/(sqrt(sum1)*sqrt(sum2));
+ 
+     return DBL2NUM(cor);
+ }
+ 
  /*
   * Arrays are ordered, integer-indexed collections of any object.
   * Array indexing starts at 0, as in C or Java.  A negative index is
***************
*** 5018,5023 ****
--- 5164,5179 ----
      rb_define_method(rb_cArray, "drop", rb_ary_drop, 1);
      rb_define_method(rb_cArray, "drop_while", rb_ary_drop_while, 0);
  
+     rb_define_method(rb_cArray, "sum", rb_ary_sum, 0);
+     rb_define_method(rb_cArray, "prod", rb_ary_prod, 0);
+     rb_define_method(rb_cArray, "min", rb_ary_min, 0);
+     rb_define_method(rb_cArray, "max", rb_ary_max, 0);
+     rb_define_method(rb_cArray, "range", rb_ary_range, 0);
+     rb_define_method(rb_cArray, "mean", rb_ary_mean, 0);
+     rb_define_method(rb_cArray, "var", rb_ary_var, 0);
+     rb_define_method(rb_cArray, "stddev", rb_ary_stddev, 0);
+     rb_define_method(rb_cArray, "correl", rb_ary_correl, 1);
+ 
      id_cmp = rb_intern("<=>");
      sym_random = ID2SYM(rb_intern("random"));
  }
